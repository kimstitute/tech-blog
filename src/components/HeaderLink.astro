---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'>;

const { href, class: className, ...rest } = Astro.props as Props;

const rawHref = href ? String(href) : '/';
const basePath = import.meta.env.BASE_URL.replace(/\/+$/, '/');
const baseUrl = new URL(basePath, 'http://internal.local');

const isExternal = /^(https?:|mailto:|tel:|#)/.test(rawHref);

const resolvedHref = isExternal
	? rawHref
	: (() => {
			const trimmed = rawHref.replace(/^\//, '');
			if (!trimmed) {
				return baseUrl.pathname;
			}
			const url = new URL(trimmed, baseUrl);
			let pathname = url.pathname;
			if (rawHref.endsWith('/') && !pathname.endsWith('/')) {
				pathname += '/';
			}
			return pathname;
	  })();

const currentPath = Astro.url.pathname.replace(baseUrl.pathname, '').replace(/^\/+/, '');
const targetPath = isExternal
	? ''
	: resolvedHref.replace(baseUrl.pathname, '').replace(/^\/+/, '').replace(/\/+$/, '');
const currentTop = currentPath.split('/')[0] ?? '';
const targetTop = targetPath.split('/')[0] ?? '';
const isActive = targetPath === '' ? currentPath === '' : currentTop === targetTop;
---

<a href={resolvedHref} class:list={[className, { active: isActive }]} {...(rest as Props)}>
	<slot />
</a>
<style>
	a {
		display: inline-block;
		text-decoration: none;
	}
	a.active {
		font-weight: bolder;
		text-decoration: underline;
	}
</style>
